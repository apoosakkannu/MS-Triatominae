---
title: "Tcruzi"
author: "Anbu Poosakkannu"
date: "10/30/2019"
output: html_document
---

```{r}
#load libraries
library(phyloseq); packageVersion("phyloseq")
library(ggplot2); packageVersion("ggplot2") #required for plotting
library(decontam); packageVersion("decontam") #required for contamination identification
library(ape); packageVersion("ape") #require to load the tree
library(dplyr); packageVersion("dplyr") #require to filter and clean up the data
library(microbiome); packageVersion("microbiome") #require to write the final results


#upload the files
#upload the OTU abundance file
abund_table<-read.csv("D:/Czech/triatomine_manuscript/MS-Triatominae/data/Originaldata_PositiveNegative/otu_norarefaction_abund.csv",row.names=1,check.names=FALSE)

#transpose the OTU abundance data to have sample names on rows
abund_table<-t(abund_table)
 
#upload the meta data file
meta_table<-read.csv("D:/Czech/triatomine_manuscript/MS-Triatominae/data/Originaldata_PositiveNegative/originalmeta_positivenegative.csv",row.names=1,check.names=FALSE)
 

#upload the taxonomy file
OTU_taxonomy<-read.csv("D:/Czech/triatomine_manuscript/MS-Triatominae/data/Originaldata_PositiveNegative/otu_norarefaction_taxa.csv",row.names=1,check.names=FALSE)



#Convert the data to phyloseq format
OTU = otu_table(as.matrix(abund_table), taxa_are_rows = FALSE)
TAX = tax_table(as.matrix(OTU_taxonomy))
SAM = sample_data(meta_table)
physeq<-merge_phyloseq(phyloseq(OTU, TAX),SAM)
physeq


#column names of taxonomy file
colnames(tax_table(physeq))
#if need to be renamed #here i renamed Domain into Kingdom
colnames(tax_table(physeq)) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")

summarize_phyloseq(physeq)

#clean up and filtering the data

#removing the contaminants to keep only bacteria
physeq_clean <- physeq %>%
  subset_taxa(
    Kingdom == "Bacteria" &
    Kingdom  != "Archaea" &
    Kingdom  != "unclassified" &
    Family  != "mitochondria" &
    Class   != "Chloroplast"
  )

physeq_bacteria

#identify Contaminants by Frequency
contamdf.freq <- isContaminant(physeq_bacteria, method="frequency", conc="postPCR_concentration")
head(contamdf.freq)

table(contamdf.freq$contaminant)

head(which(contamdf.freq$contaminant))

#plot contaminant taxa frequency Vs pcr product concentration
set.seed(100)
plot_frequency(physeq_bacteria, taxa_names(physeq_bacteria)[sample(which(contamdf.freq$contaminant),117)], conc="postPCR_concentration") +
    xlab("PCR product concentration (ng/ÂµL)")


#filter the contaminant identified by decontaminant package
physeq_bacteria_decontam1 <- prune_taxa(!contamdf.freq$contaminant, physeq_bacteria)
physeq_bacteria_decontam1


#remove an additional OTU (unknown bacteria) present in negative samples
badtaxa = "OTU_1849"
allTaxa = taxa_names(physeq_bacteria_decontam1)
allTaxa <- allTaxa[!(allTaxa %in% badtaxa)]
physeq_bacteria_decontam2 = prune_taxa(allTaxa, physeq_bacteria_decontam1)

physeq_bacteria_decontam2



#write the final results
write_phyloseq(physeq_bacteria_decontam2, type = "OTU", path = getwd())

write_phyloseq(physeq_clean_decontam2, type = "TAXONOMY", path = getwd())


#original file names are 




#remove the single tones #we dont have any singletones
#physeq_clean_decontamt2_max1removed <- prune_taxa(taxa_sums(physeq_clean_decontam2)>1,physeq_clean_decontam2)

#some of the following process will be random, so to make the analysis reproducible, we set the random seed number. 
set.seed(5)

# Scale reads to even depth #for non-decontam samples
physeq_clean_rarefy <- rarefy_even_depth(physeq_clean, sample.size = 1000)

physeq_clean_rarefy


# Scale reads to even depth #for decontam samples
physeq_clean_decontam2_rarefy <- rarefy_even_depth(physeq_clean_decontam2, sample.size = 300)

physeq_clean_decontam2_rarefy


```


```{r}

#some of the following process will be random, so to make the analysis reproducible, we set the random seed number. 
set.seed(5)

#keep only triatomine samples, and nest samples #remove not correctely idenified instar samples 
physeq_clean_decontam2_rarefy_triatomine_nest <- physeq_clean_decontam2_rarefy %>% 
  subset_samples(Organism == "Triatoma" & T_cruzi != "NA" & T_cruzi != "FALSE" & Origin == "field" & Instar != "L2_3" & Instar != "L3_4" & Nest != "houseIO" & Nest != "bob" & Nest != "LVH") %>%
  prune_taxa(taxa_sums(.) > 0, .)

physeq_clean_decontam2_rarefy_triatomine_nest


#analysis for the whole data

#Alphadiversity analysis

#for T_cruzi factor
p1 <- plot_anova_diversity(physeq_clean_decontam2_rarefy_triatomine_nest, method = c("richness", "shannon"), 
    grouping_column = "Host_Taxa", pValueCutoff = 0.05)
print(p1)


#ordination analysis 

#ordination analyses
#Make an PCoA ordination plot based on abundance based unifrac distances
ord1 <- ordinate(physeq_clean_decontam2_rarefy_triatomine_nest, method="PCoA", distance="unifrac", weighted=TRUE)
#weighted unifrac
p2 <- plot_ordination(physeq_clean_decontam2_rarefy_triatomine_nest, ord1, color="Host_Taxa",title="Weighted Unifrac for Tcruzi")
p2 <- p2 + geom_point(size=5) + theme_bw()
print(p2)



# Calculate bray curtis distance matrix
physeq_clean_decontam2_rarefy_triatomine_nest_bray <- phyloseq::distance(physeq_clean_decontam2_rarefy_triatomine_nest, method = "bray")
# make a data frame from the sample_data
sampledf1 <- data.frame(sample_data(physeq_clean_decontam2_rarefy_triatomine_nest))
# Adonis test for Tcruzi
adonis(physeq_clean_decontam2_rarefy_triatomine_nest_bray ~ Host_Taxa*T_cruzi, data = sampledf1)


# Homogeneity of dispersion test for factor host species
beta1 <- betadisper(physeq_clean_decontam2_rarefy_triatomine_nest_bray, sampledf1$Host_Taxa)
permutest(beta1)


#differential abundance analysis for top 50 taxa

#subset the 50 most abundant taxa
physeq_clean_decontam2_rarefy_triatomine_nest_top50<-prune_taxa(names(sort(taxa_sums(physeq_clean_decontam2_rarefy_triatomine_nest), TRUE)[1:50]), physeq_clean_decontam2_rarefy_triatomine_nest)

#differential abundance analysis
deseq_sig <- differential_abundance(physeq_clean_decontam2_rarefy_triatomine_nest_top50, grouping_column = "T_cruzi", output_norm = "log-relative", 
    pvalue.threshold = 0.05, lfc.threshold = 0, filename = F)

p3 <- plot_signif(deseq_sig$plotdata, top.taxa = 10)
print(p3)


```

```{r}
#co-occurence analysis 
#some of the following process will be random, so to make the analysis reproducible, we set the random seed number. 
set.seed(5)

#keep only triatomine samples, and nest samples #remove not correctely idenified instar samples 
physeq_clean_decontam2_rarefy_triatomine_nest <- physeq_clean_decontam2_rarefy %>% 
  subset_samples(Organism == "Triatoma" & T_cruzi != "NA" & T_cruzi != "FALSE" & Origin == "field" & Instar != "L2_3" & Instar != "L3_4" & Nest != "houseIO" & Nest != "bob" & Nest != "LVH") %>%
  prune_taxa(taxa_sums(.) > 0, .)

physeq_clean_decontam2_rarefy_triatomine_nest

#remove OTUs whose mean value per sample is less than 2
physeq_clean_decontam2_rarefy_triatomine_nest_abundmean <- filter_taxa(physeq_clean_decontam2_rarefy_triatomine_nest, function(x) mean(x) > 1, TRUE)

physeq_clean_decontam2_rarefy_triatomine_nest_abundmean


physeq_clean_decontam2_rarefy_triatomine_nest_abundmean_cooccur <- spiec.easi(physeq_clean_decontam2_rarefy_triatomine_nest_abundmean, method='mb', lambda.min.ratio=1e-2,
                           nlambda=20, pulsar.params=list(rep.num=50))
ig2.mb <- adj2igraph(getRefit(physeq_clean_decontam2_rarefy_triatomine_nest_abundmean_cooccur),  vertex.attr=list(name=taxa_names(physeq_clean_decontam2_rarefy_triatomine_nest_abundmean)))
plot_network(ig2.mb, physeq_clean_decontam2_rarefy_triatomine_nest_abundmean, type='taxa', color="Genus")




```

